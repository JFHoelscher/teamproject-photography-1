---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by suzhengyu.
--- DateTime: 27.06.2021 18:32
---
-- table array: { {1, 2}, {3, 4}, {5, 6} }
-- Should return { 135, 136, 145, 146, 235, 236, 245, 246 }
--
-- This uses tail recursion so hopefully lua is smart enough not to blow the stack
function arrayCombine(tableArray)
    -- Define the base cases
    if (tableArray == nil) then
        return nil
    elseif (#tableArray == 0) then
        return {}
    elseif (#tableArray == 1) then
        return tableArray[1]
    elseif (#tableArray == 2) then
        return arrayCombine2(tableArray[1], tableArray[2])
    end -- if

    -- We have more than 2 tables in the input parameter.  We want to pick off the *last*
    -- two arrays, merge them, and then recursively call this function again so that we
    -- can work our way up to the front.
    local lastArray = table.remove(tableArray, #tableArray)
    local nextToLastArray = table.remove(tableArray, #tableArray)
    local mergedArray = arrayCombine2(nextToLastArray, lastArray)

    table.insert(tableArray, mergedArray)

    return arrayCombine(tableArray)
end -- arrayCombine


function arrayCombine2(array1, array2)
    local mergedArray = {}

    for _, elementA in ipairs(array1) do
        for _, elementB in ipairs(array2) do
            table.insert(mergedArray, elementA..","..elementB)
        end -- for
    end -- for

    return mergedArray
end -- arrayCombine2

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

-- You can set it up this way:
combinedArray = {}
ArraySettings = {["Contrast"]={0,20,40},["Saturation"] = {40,50,60},["Highlights"] = {10,20,30}}
print(ArraySettings.Contrast[2])
table.insert(combinedArray, ArraySettings.Contrast)
table.insert(combinedArray, ArraySettings.Saturation)
table.insert(combinedArray,ArraySettings.Highlights)

SettingsTable = {}
for key,v in pairs(arrayCombine(combinedArray)) do
    --print(i,v)
    SettingsTable[key] = Split(v,",")
end

for index, data in ipairs(SettingsTable) do
    print(index)

    for key, value in pairs(data) do
        print('\t', key, value)
    end
end

print(ArraySettings[1])

-- Or go this way, which may be somewhat cleaner:

--[[for i,v in ipairs(arrayCombine({{"A", "B", "C"}, {"D", "E", "F"}})) do
    print(i,v)
end]]